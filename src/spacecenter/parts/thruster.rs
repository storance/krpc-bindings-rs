use super::Part;
use crate::codec::{Decode, Encode};
use crate::spacecenter::ReferenceFrame;
use crate::{remote_type, RemoteObject, Vector3};

remote_type!(
/// The component of an Engine or RCS part that generates thrust. Can obtained by
/// calling` Engine::thrusters()` or `RCS::thrusters()`.
///
/// # Note
/// Engines can consist of multiple thrusters. For example, the S3 KS-25x4 “Mammoth” has four
/// rocket nozzels, and so consists of four thrusters.
object SpaceCenter.Thruster {
    properties: {
        {
            Part: Part,
            /// Returns the part object for this thruster.
            ///
            /// **Game Scenes**: All
            get: part
        }
        {
            ThrustReferenceFrame: ReferenceFrame,
            /// Returns a reference frame that is fixed relative to the thruster and
            /// orientated with its thrust direction (Thruster.thrustDirection(ReferenceFrame)).
            /// For gimballed engines, this takes into account the current rotation of the gimbal.
            ///
            /// * The origin is at the position of thrust for this thruster
            /// (`Thruster::thrust_position()`).
            /// * The axes rotate with the thrust direction. This is the direction in which the
            /// thruster expels propellant, including any gimballing.
            /// * The y-axis points along the thrust direction.
            /// * The x-axis and z-axis are perpendicular to the thrust direction.
            ///
            /// **Game Scenes**: All
            get: thrust_reference_frame
        }
        {
            Gimballed: bool,
            /// Returns whether the thruster is gimballed.
            ///
            /// **Game Scenes**: All
            get: is_gimballed
        }
        {
            GimbalAngle: f32,
            /// Returns the current gimbal angle in the pitch, roll and yaw axes, in degrees.
            ///
            /// **Game Scenes**: All
            get: gimbal_angle
        }
    }
    methods: {
        {
            /// The position at which the thruster generates thrust, in the given reference frame.
            /// For gimballed engines, this takes into account the current rotation of the gimbal.
            ///
            /// **Game Scenes**: All
            ///
            /// # Arguments
            /// * `reference_frame` - The reference frame that the returned position vector is in.
            ///
            /// # Return
            /// The position as a vector.
            fn thrust_position(reference_frame: &ReferenceFrame) -> Vector3 {
                ThrustPosition(reference_frame)
            }
        }
        {
            /// The direction of the force generated by the thruster, in the given reference frame.
            /// This is opposite to the direction in which the thruster expels propellant.
            /// For gimballed engines, this takes into account the current rotation of the gimbal.
            ///
            /// **Game Scenes**: All
            ///
            /// # Arguments
            /// * `reference_frame` - The reference frame that the returned direction is in.
            ///
            /// # Return
            /// The direction as a unit vector.
            fn thrust_direction(reference_frame: &ReferenceFrame) -> Vector3 {
                ThrustDirection(reference_frame)
            }
        }
        {
            /// Position around which the gimbal pivots.
            ///
            /// **Game Scenes**: All
            ///
            /// # Arguments
            /// * `reference_frame` - The reference frame that the returned position vector is in.
            ///
            /// # Return
            /// The position as a vector.
            fn gimbal_position(reference_frame: &ReferenceFrame) -> Vector3 {
                GimbalPosition(reference_frame)
            }
        }
        {
            /// The position at which the thruster generates thrust, when the engine is in
            /// its initial position (no gimballing), in the given reference frame.
            ///
            /// **Game Scenes**: All
            ///
            /// # Arguments
            /// * `reference_frame` - The reference frame that the returned position vector is in.
            ///
            /// # Return
            /// The position as a vector.
            ///
            /// # Notes
            /// This position can move when the gimbal rotates. This is because the thrust
            /// position and gimbal position are not necessarily the same.
            fn initial_thrust_position(reference_frame: &ReferenceFrame) -> Vector3 {
                InitialThrustPosition(reference_frame)
            }
        }
        {
            /// The direction of the force generated by the thruster, when the engine is in its
            /// initial position (no gimballing), in the given reference frame. This is
            /// opposite to the direction in which the thruster expels propellant.
            ///
            /// **Game Scenes**: All
            ///
            /// # Arguments
            /// * `reference_frame` - The reference frame that the returned direction is in.
            ///
            /// # Return
            /// The direction as a unit vector.
            fn initial_thrust_direction(reference_frame: &ReferenceFrame) -> Vector3 {
                InitialThrustDirection(reference_frame)
            }
        }
    }
});
